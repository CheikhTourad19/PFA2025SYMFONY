{# templates/medecin/messages.html.twig #}
{% extends 'medecin/index.html.twig' %}

{% block title %}Messagerie{% endblock %}

{% block content %}
    <div class="container mx-auto p-4">
        <h1 class="text-2xl font-bold mb-6 text-gray-800">Messagerie</h1>

        <div class="flex flex-col lg:flex-row gap-6">
            <!-- Left column: Search and conversation list -->
            <div class="w-full lg:w-1/3 flex-shrink-0">
                <div class="bg-white rounded-xl shadow-md overflow-hidden h-full flex flex-col">
                    <div class="bg-blue-600 text-white p-4">
                        <h5 class="font-semibold text-lg">Contacts</h5>
                    </div>

                    <!-- Search area -->
                    <div class="p-3 border-b relative">
                        <input
                                type="text"
                                id="searchInput"
                                class="w-full p-2 pl-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="Rechercher un médecin..."
                        >
                        <div id="searchResults" class="absolute z-10 mt-1 w-full bg-white shadow-lg rounded-md max-h-60 overflow-auto hidden"></div>
                    </div>

                    <!-- Conversation list -->
                    <div class="p-3 bg-gray-50 border-b">
                        <h6 class="font-medium text-gray-700">Conversations récentes</h6>
                    </div>
                    <div class="flex-grow overflow-auto" id="conversationsList">
                        <div class="flex flex-col items-center justify-center py-8">
                            <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mb-3"></div>
                            <p class="text-gray-500">Chargement des conversations...</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right column: Chat area -->
            <div class="flex-grow">
                <div class="bg-white rounded-xl shadow-md overflow-hidden h-full flex flex-col" id="messageContainer" style="display: none;">
                    <!-- Chat header with contact name -->
                    <div class="bg-blue-600 text-white p-4 flex justify-between items-center" id="messageHeader">
                        <h5 class="font-semibold text-lg">Sélectionnez une conversation</h5>
                    </div>

                    <!-- Messages area -->
                    <div class="flex-grow overflow-hidden flex flex-col">
                        <div class="p-4 max-h-60 overflow-y-auto flex-grow" id="messagesList"></div>
                    </div>

                    <!-- Message input area -->
                    <div class="p-3 bg-gray-50 border-t">
                        <div class="flex items-end gap-2">
                            <textarea
                                    id="messageInput"
                                    class="flex-grow p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                                    placeholder="Tapez votre message..."
                                    rows="2"
                            ></textarea>
                            <button
                                    id="sendButton"
                                    class="h-12 w-12 bg-blue-600 hover:bg-blue-700 text-white rounded-lg flex items-center justify-center transition-colors"
                            >
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z" clip-rule="evenodd" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Prompt when no conversation is selected -->
                <div class="bg-white rounded-xl shadow-md overflow-hidden h-full flex items-center justify-center" id="selectConversationPrompt">
                    <div class="text-center p-8">
                        <div class="mx-auto h-16 w-16 text-gray-400 mb-4">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                            </svg>
                        </div>
                        <h4 class="text-lg font-medium text-gray-700 mb-2">Sélectionnez une conversation</h4>
                        <p class="text-gray-500">Vos messages apparaîtront ici</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        const medecins = {{ medecins|json_encode|raw }};
        const currentUserId = {{ app.user.id|json_encode|raw }};
        let selectedUserId = null;
        let mercureEventSource = null; // Single EventSource instance
        let processedMessageIds = new Set(); // Track processed messages to prevent duplicates

        console.log('Médecins disponibles:', medecins);

        // DOM elements
        const searchInput = document.getElementById('searchInput');
        const searchResults = document.getElementById('searchResults');
        const messageContainer = document.getElementById('messageContainer');
        const selectConversationPrompt = document.getElementById('selectConversationPrompt');

        // Utility function to generate unique message ID
        function generateMessageId(senderId, content, timestamp) {
            return `${senderId}-${content.substring(0, 50)}-${timestamp}`;
        }

        // Function to show/hide message interface
        function toggleMessageInterface(show) {
            if (show) {
                messageContainer.style.display = 'flex';
                selectConversationPrompt.style.display = 'none';
            } else {
                messageContainer.style.display = 'none';
                selectConversationPrompt.style.display = 'flex';
            }
        }

        // Initialize - hide message interface
        toggleMessageInterface(false);

        // Search functionality
        searchInput.addEventListener('input', function() {
            const query = this.value.toLowerCase().trim();

            if (!query) {
                searchResults.innerHTML = '';
                searchResults.classList.add('hidden');
                return;
            }

            const results = medecins.filter(medecin =>
                medecin.nom.toLowerCase().includes(query) ||
                medecin.prenom.toLowerCase().includes(query) ||
                (medecin.service && medecin.service.toLowerCase().includes(query))
            );

            searchResults.innerHTML = '';
            searchResults.classList.remove('hidden');

            if (results.length === 0) {
                searchResults.innerHTML = '<div class="p-3 text-gray-500">Aucun résultat</div>';
                return;
            }

            results.forEach(medecin => {
                const resultItem = document.createElement('div');
                resultItem.className = 'p-3 hover:bg-gray-100 cursor-pointer transition-colors border-b border-gray-100 last:border-0';
                resultItem.innerHTML = `
                    <div class="font-medium">${medecin.prenom} ${medecin.nom}</div>
                    <div class="text-sm text-gray-500">${medecin.service || ''}</div>
                `;

                resultItem.addEventListener('click', () => {
                    selectUser(medecin.id);
                    searchInput.value = '';
                    searchResults.innerHTML = '';
                    searchResults.classList.add('hidden');
                });

                searchResults.appendChild(resultItem);
            });
        });

        // Function to select user and load conversation
        function selectUser(userId) {
            selectedUserId = userId;
            fetchMessages(userId);

            toggleMessageInterface(true);

            const selectedUser = medecins.find(m => m.id === userId);
            if (selectedUser) {
                document.getElementById('messageHeader').innerHTML = `
                    <h5 class="font-semibold text-lg">${selectedUser.prenom} ${selectedUser.nom}</h5>
                    <span class="bg-white text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded">${selectedUser.service || ''}</span>
                `;
            }

            // Update conversation list UI
            document.querySelectorAll('.conversation-item').forEach(item => {
                if (item.getAttribute('data-user-id') == userId) {
                    item.classList.add('bg-blue-50');
                    item.classList.remove('hover:bg-gray-100');
                } else {
                    item.classList.remove('bg-blue-50');
                    item.classList.add('hover:bg-gray-100');
                }
            });
        }

        // Function to fetch messages
        async function fetchMessages(userId) {
            try {
                document.getElementById('messagesList').innerHTML = `
                    <div class="flex flex-col items-center justify-center py-8">
                        <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mb-3"></div>
                        <p class="text-gray-500">Chargement des messages...</p>
                    </div>
                `;

                const response = await fetch(`/api/chat/messages/${userId}`);
                if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status}`);
                }

                const data = await response.json();
                displayMessages(data.messages);
            } catch (error) {
                console.error('Erreur lors du chargement des messages:', error);
                document.getElementById('messagesList').innerHTML = `
                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded m-4">
                        Erreur lors du chargement des messages. Veuillez réessayer.
                    </div>
                `;
            }
        }

        // Function to display messages
        function displayMessages(messages) {
            const messagesList = document.getElementById('messagesList');
            messagesList.innerHTML = '';

            if (!messages || messages.length === 0) {
                messagesList.innerHTML = `
                    <div class="flex flex-col items-center justify-center py-8 text-gray-500">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                        </svg>
                        <p>Aucun message. Commencez la conversation !</p>
                    </div>
                `;
                return;
            }

            const messagesContainer = document.createElement('div');
            messagesContainer.className = 'space-y-3';

            messages.forEach(message => {
                const messageItem = document.createElement('div');
                messageItem.className = `flex ${message.isSentByMe ? 'justify-end' : 'justify-start'}`;

                const messageDate = new Date(message.sentAt);
                const formattedDate = messageDate.toLocaleString('fr-FR', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });

                // Generate unique ID for this message
                const messageId = generateMessageId(
                    message.isSentByMe ? currentUserId : selectedUserId,
                    message.content,
                    message.sentAt
                );
                processedMessageIds.add(messageId);

                messageItem.innerHTML = `
                    <div class="max-w-xs md:max-w-md lg:max-w-lg xl:max-w-xl rounded-lg p-3 ${message.isSentByMe ? 'bg-blue-600 text-white rounded-br-none' : 'bg-gray-200 text-gray-800 rounded-bl-none'}">
                        <div class="message-content">${message.content}</div>
                        <div class="text-xs mt-1 ${message.isSentByMe ? 'text-blue-100' : 'text-gray-500'} text-right">${formattedDate}</div>
                    </div>
                `;
                messagesContainer.appendChild(messageItem);
            });

            messagesList.appendChild(messagesContainer);
            messagesList.scrollTop = messagesList.scrollHeight;
        }

        // Function to add a single message to the display
        function addMessageToDisplay(messageData, isSentByMe = false) {
            const messageId = generateMessageId(
                messageData.senderId || currentUserId,
                messageData.content,
                messageData.sentAt || Date.now()
            );

            // Check if we've already processed this message
            if (processedMessageIds.has(messageId)) {
                console.log('Message already processed, skipping:', messageId);
                return;
            }

            processedMessageIds.add(messageId);

            const messagesList = document.getElementById('messagesList');
            let messagesContainer = messagesList.querySelector('.space-y-3');

            if (!messagesContainer) {
                messagesContainer = document.createElement('div');
                messagesContainer.className = 'space-y-3';
                messagesList.innerHTML = '';
                messagesList.appendChild(messagesContainer);
            }

            const messageItem = document.createElement('div');
            messageItem.className = `flex ${isSentByMe ? 'justify-end' : 'justify-start'}`;

            const formattedDate = new Date(messageData.sentAt || Date.now()).toLocaleString('fr-FR', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });

            messageItem.innerHTML = `
                <div class="max-w-xs md:max-w-md lg:max-w-lg xl:max-w-xl rounded-lg p-3 ${isSentByMe ? 'bg-blue-600 text-white rounded-br-none' : 'bg-gray-200 text-gray-800 rounded-bl-none'}">
                    <div class="message-content">${messageData.content}</div>
                    <div class="text-xs mt-1 ${isSentByMe ? 'text-blue-100' : 'text-gray-500'} text-right">${formattedDate}</div>
                </div>
            `;

            messagesContainer.appendChild(messageItem);
            messagesList.scrollTop = messagesList.scrollHeight;
        }

        // Send message functionality
        document.getElementById('sendButton').addEventListener('click', sendMessage);
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        async function sendMessage() {
            if (!selectedUserId) return;

            const messageInput = document.getElementById('messageInput');
            const content = messageInput.value.trim();

            if (!content) return;

            try {
                const sendButton = document.getElementById('sendButton');
                sendButton.disabled = true;
                sendButton.innerHTML = `
                    <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                `;

                const response = await fetch(`/api/chat/messages/${selectedUserId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ content })
                });

                if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status}`);
                }

                const data = await response.json();

                // Add the sent message to display
                if (data.message) {
                    addMessageToDisplay({
                        content: data.message.content,
                        sentAt: data.message.sentAt,
                        senderId: currentUserId
                    }, true);
                }

                messageInput.value = '';
                updateConversationItem(selectedUserId, content);

            } catch (error) {
                console.error('Erreur lors de l\'envoi du message:', error);
                showErrorNotification('Erreur lors de l\'envoi du message');
            } finally {
                // Re-enable send button
                const sendButton = document.getElementById('sendButton');
                sendButton.disabled = false;
                sendButton.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z" clip-rule="evenodd" />
                    </svg>
                `;
            }
        }

        // Utility functions
        function showErrorNotification(message) {
            const notification = document.createElement('div');
            notification.className = 'fixed bottom-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        function updateConversationItem(userId, messageContent) {
            const conversationItem = document.querySelector(`.conversation-item[data-user-id="${userId}"]`);

            if (conversationItem) {
                const messageElement = conversationItem.querySelector('.text-sm.text-gray-500.truncate');
                if (messageElement) {
                    messageElement.textContent = messageContent;
                }

                const dateElement = conversationItem.querySelector('.text-xs.text-gray-400');
                if (dateElement) {
                    const now = new Date();
                    const formattedDate = now.toLocaleString('fr-FR', {
                        day: '2-digit',
                        month: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit'
                    });
                    dateElement.textContent = formattedDate;
                }

                const conversationsList = document.getElementById('conversationsList');
                const firstChild = conversationsList.firstElementChild;

                if (firstChild && firstChild !== conversationItem) {
                    conversationsList.insertBefore(conversationItem, firstChild);
                }
            } else {
                loadConversations();
            }
        }

        // Conversation management
        function displayConversations(conversations) {
            const conversationsList = document.getElementById('conversationsList');
            conversationsList.innerHTML = '';

            console.log('Conversations reçues:', conversations);

            if (!conversations || conversations.length === 0) {
                conversationsList.innerHTML = `
                    <div class="flex flex-col items-center justify-center py-8 text-gray-500">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                        </svg>
                        <p>Aucune conversation</p>
                        <p class="text-sm mt-1">Recherchez un contact pour commencer à discuter</p>
                    </div>
                `;
                return;
            }

            conversations.forEach(conversation => {
                const withUser = conversation.with || conversation.user;
                const message = conversation.message;

                if (!withUser || !message) {
                    console.error('Format de conversation invalide:', conversation);
                    return;
                }

                const messageDate = new Date(message.sentAt);
                const formattedDate = messageDate.toLocaleString('fr-FR', {
                    day: '2-digit',
                    month: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit'
                });

                const conversationItem = document.createElement('div');
                conversationItem.className = 'conversation-item p-3 border-b border-gray-100 flex justify-between items-center hover:bg-gray-100 cursor-pointer transition-colors';
                conversationItem.setAttribute('data-user-id', withUser.id);

                if (selectedUserId == withUser.id) {
                    conversationItem.classList.add('bg-blue-50');
                    conversationItem.classList.remove('hover:bg-gray-100');
                }

                conversationItem.innerHTML = `
                    <div class="flex-1 min-w-0">
                        <div class="font-medium truncate">
                            ${withUser.prenom} ${withUser.nom}
                        </div>
                        <div class="text-sm text-gray-500 truncate">
                            ${message.content}
                        </div>
                    </div>
                    <div class="text-xs text-gray-400 ml-2 whitespace-nowrap">
                        ${formattedDate}
                    </div>
                `;

                conversationItem.addEventListener('click', () => {
                    selectUser(withUser.id);
                });

                conversationsList.appendChild(conversationItem);
            });
        }

        async function loadConversations() {
            try {
                document.getElementById('conversationsList').innerHTML = `
                    <div class="flex flex-col items-center justify-center py-8">
                        <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mb-3"></div>
                        <p class="text-gray-500">Chargement des conversations...</p>
                    </div>
                `;

                const response = await fetch('/api/chat/conversations');
                if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status}`);
                }

                const data = await response.json();
                console.log('Données reçues du serveur:', data);

                if (data && data.conversations) {
                    displayConversations(data.conversations);
                } else {
                    throw new Error('Format de réponse invalide');
                }
            } catch (error) {
                console.error('Erreur lors du chargement des conversations:', error);
                document.getElementById('conversationsList').innerHTML = `
                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded m-4">
                        Erreur lors du chargement des conversations: ${error.message}
                        <button
                            class="mt-2 text-sm bg-red-500 hover:bg-red-600 text-white py-1 px-3 rounded transition-colors"
                            onclick="loadConversations()"
                        >
                            Réessayer
                        </button>
                    </div>
                `;
            }
        }

        // SINGLE Mercure subscription setup
        function setupMercureSubscription() {
            // Close existing connection if any
            if (mercureEventSource) {
                console.log('Closing existing Mercure connection');
                mercureEventSource.close();
                mercureEventSource = null;
            }

            const url = new URL('{{ mercure_public_url }}');
            url.searchParams.append('topic', `chat/messages/${currentUserId}`);

            console.log('Setting up Mercure subscription to:', url.toString());

            mercureEventSource = new EventSource(url.toString());

            mercureEventSource.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data);
                    console.log('Received message via Mercure:', data);

                    // Only show the message in the current conversation if it's from the selected user
                    if (selectedUserId && selectedUserId == data.senderId) {
                        addMessageToDisplay({
                            content: data.content,
                            sentAt: data.sentAt || new Date().toISOString(),
                            senderId: data.senderId
                        }, false);

                        // Play notification sound
                        playNotificationSound();
                    } else {
                        // Show notification for messages from other users
                        showNewMessageNotification(data.senderId);
                    }

                    // Always refresh conversations to update the list
                    loadConversations();

                } catch (error) {
                    console.error('Error parsing Mercure message:', error);
                }
            };

            mercureEventSource.onerror = (event) => {
                console.error('Mercure EventSource error:', event);
                // Reconnect after 5 seconds
                setTimeout(() => {
                    console.log('Attempting to reconnect to Mercure...');
                    setupMercureSubscription();
                }, 5000);
            };

            mercureEventSource.onopen = () => {
                console.log('Mercure connection established');
            };
        }

        // Utility functions for notifications
        function playNotificationSound() {
            try {
                const audio = new Audio('/sounds/notification.mp3');
                audio.play().catch(error => console.log('Audio play failed:', error));
            } catch (error) {
                console.log('Audio not available:', error);
            }
        }

        function showNewMessageNotification(userId) {
            const conversationEl = document.querySelector(`.conversation-item[data-user-id="${userId}"]`);
            if (conversationEl && !conversationEl.querySelector('.notification-dot')) {
                const dot = document.createElement('div');
                dot.className = 'notification-dot absolute top-2 right-2 h-2 w-2 bg-blue-500 rounded-full';
                conversationEl.style.position = 'relative';
                conversationEl.appendChild(dot);
            }
        }

        // Page cleanup
        window.addEventListener('beforeunload', () => {
            if (mercureEventSource) {
                mercureEventSource.close();
            }
        });

        // Initialize everything when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM loaded, initializing...');
            loadConversations();
            setupMercureSubscription();
        });
    </script>
{% endblock %}