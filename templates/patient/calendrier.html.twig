{% extends 'patient/patient.base.html.twig' %}

{% block title %}Calendrier du Médecin{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        :root {
            --primary-color: #4a6fa5;
            --secondary-color: #6b8cae;
            --accent-color: #ff7e5f;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --info-color: #17a2b8;
        }

        body {
            background-color: #f5f7fa;
            font-family: 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        }

        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 15px;
        }

        .calendar-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 6px 18px rgba(0, 0, 0, 0.08);
            padding: 2rem;
            margin-top: 1.5rem;
        }

        h1 {
            color: var(--primary-color);
            font-weight: 600;
            margin-bottom: 1.5rem;
            text-align: center;
            font-size: 2rem;
        }

        .doctor-info {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--secondary-color);
            font-size: 1.1rem;
        }

        .legend {
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
        }

        .legend-item {
            display: flex;
            align-items: center;
            font-size: 0.9rem;
            color: var(--dark-color);
        }

        .color-box {
            width: 20px;
            height: 20px;
            margin-right: 8px;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .available-box {
            background-color: var(--success-color);
        }

        .booked-box {
            background-color: var(--danger-color);
        }

        .holiday-box {
            background-color: var(--warning-color);
        }

        .month-selector {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            background: var(--light-color);
            padding: 1rem;
            border-radius: 8px;
        }

        .month-selector h2 {
            margin: 0;
            color: var(--primary-color);
            font-size: 1.5rem;
            font-weight: 600;
        }

        .btn-month {
            padding: 0.6rem 1.2rem;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-month:hover {
            background-color: var(--secondary-color);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .btn-month:active {
            transform: translateY(0);
        }

        .calendar {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 10px;
            margin-bottom: 2rem;
        }

        .calendar-header {
            font-weight: 600;
            text-align: center;
            padding: 12px;
            background-color: var(--primary-color);
            color: white;
            border-radius: 6px;
            font-size: 0.9rem;
            text-transform: uppercase;
        }

        .calendar-day {
            min-height: 120px;
            padding: 10px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            background-color: white;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .calendar-day:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        }

        .calendar-day.empty {
            background-color: var(--light-color);
            border: none;
        }

        .calendar-day.today {
            border: 2px solid var(--accent-color);
            background-color: rgba(255, 126, 95, 0.05);
        }

        .day-number {
            font-weight: bold;
            margin-bottom: 8px;
            color: var(--dark-color);
            font-size: 1rem;
            text-align: center;
        }

        .time-slots-container {
            display: flex;
            flex-direction: column;
            gap: 6px;
            margin-top: 5px;
        }

        .time-slot {
            margin: 0;
            padding: 6px;
            border-radius: 6px;
            font-size: 0.8rem;
            text-align: center;
            transition: all 0.2s ease;
        }

        .time-slot.available {
            background-color: rgba(40, 167, 69, 0.15);
            color: var(--success-color);
            cursor: pointer;
            border: 1px solid rgba(40, 167, 69, 0.3);
        }

        .time-slot.booked {
            background-color: rgba(220, 53, 69, 0.1);
            color: var(--danger-color);
            border: 1px solid rgba(220, 53, 69, 0.2);
        }

        .time-slot.available:hover {
            background-color: rgba(40, 167, 69, 0.25);
            transform: translateX(2px);
        }

        .non-working-day {
            display: flex;
            align-items: center;
            justify-content: center;
            height: calc(100% - 25px);
            color: #6c757d;
            font-size: 0.85rem;
            text-align: center;
            padding: 0.5rem;
        }

        @media (max-width: 768px) {
            .calendar {
                grid-template-columns: repeat(1, 1fr);
            }

            .calendar-header {
                display: none;
            }

            .calendar-day {
                min-height: auto;
            }

            .month-selector {
                flex-direction: column;
                gap: 1rem;
            }
        }

        /* Animation pour les jours */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .calendar-day {
            animation: fadeIn 0.3s ease forwards;
            opacity: 0;
        }

        /* Délai d'animation pour chaque jour */
        .calendar-day:nth-child(1) { animation-delay: 0.1s; }
        .calendar-day:nth-child(2) { animation-delay: 0.2s; }
        .calendar-day:nth-child(3) { animation-delay: 0.3s; }
        .calendar-day:nth-child(4) { animation-delay: 0.4s; }
        .calendar-day:nth-child(5) { animation-delay: 0.5s; }
        .calendar-day:nth-child(6) { animation-delay: 0.6s; }
        .calendar-day:nth-child(7) { animation-delay: 0.7s; }
        .calendar-day:nth-child(8) { animation-delay: 0.8s; }
        /* Continuez selon le nombre de jours nécessaires */
    </style>
{% endblock %}

{% block content %}
    <div class="container">
        <h1>Calendrier de Rendez-vous</h1>
        <div class="doctor-info">
            Dr. {{ rdv[0].medecin.user.nom }} {{ rdv[0].medecin.user.prenom }} - Spécialité
        </div>

        <div class="calendar-container">
            <div class="legend">
                <div class="legend-item">
                    <div class="color-box available-box"></div>
                    <span>Disponible</span>
                </div>
                <div class="legend-item">
                    <div class="color-box booked-box"></div>
                    <span>Occupé</span>
                </div>
                <div class="legend-item">
                    <div class="color-box holiday-box"></div>
                    <span>Fermé/Jour férié</span>
                </div>
            </div>

            <div class="month-selector">
                <button class="btn-month prev-month">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
                    </svg>
                    Mois précédent
                </button>
                <h2 id="current-month">Mai 2025</h2>
                <button class="btn-month next-month">
                    Mois suivant
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
                    </svg>
                </button>
            </div>

            <div class="calendar">
                <div class="calendar-header">Dimanche</div>
                <div class="calendar-header">Lundi</div>
                <div class="calendar-header">Mardi</div>
                <div class="calendar-header">Mercredi</div>
                <div class="calendar-header">Jeudi</div>
                <div class="calendar-header">Vendredi</div>
                <div class="calendar-header">Samedi</div>

                <!-- Le calendrier sera généré dynamiquement via JavaScript -->
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Variables pour le calendrier
            const medecinId = {{ rdv[0].medecin.id }};
            let currentDate = new Date();
            let currentMonth = currentDate.getMonth();
            let currentYear = currentDate.getFullYear();

            // Rendez-vous existants - format corrigé
            const existingAppointments = [
                {% for appointment in rdv %}
                {
                    date: new Date("{{ appointment.date|date('Y-m-d\\TH:i:s') }}"),  // Format ISO
                    status: "{{ appointment.statut }}"
                },
                {% endfor %}
            ];

            // Jours fériés en France pour 2025
            const holidays = [
                new Date(2025, 0, 1),   // Jour de l'An
                new Date(2025, 4, 1),    // Fête du Travail
                new Date(2025, 4, 8),    // Victoire 1945
                new Date(2025, 6, 14),   // Fête Nationale
                new Date(2025, 7, 15),   // Assomption
                new Date(2025, 10, 1),   // Toussaint
                new Date(2025, 10, 11),  // Armistice
                new Date(2025, 11, 25)  // Noël
            ];

            // Fonction pour vérifier si une date est un jour férié
            function isHoliday(date) {
                return holidays.some(holiday =>
                    holiday.getDate() === date.getDate() &&
                    holiday.getMonth() === date.getMonth() &&
                    holiday.getFullYear() === date.getFullYear()
                );
            }

            // Fonction pour vérifier si c'est aujourd'hui
            function isToday(date) {
                const today = new Date();
                return date.getDate() === today.getDate() &&
                    date.getMonth() === today.getMonth() &&
                    date.getFullYear() === today.getFullYear();
            }

            // Jours de travail (0 = Dimanche, 1 = Lundi, etc.)
            const workingDays = [1, 2, 3, 4, 5]; // Lundi à Vendredi

            // Fonction pour générer le calendrier
            function generateCalendar(month, year) {
                const calendarElement = document.querySelector('.calendar');
                const daysInMonth = new Date(year, month + 1, 0).getDate();
                const firstDay = new Date(year, month, 1).getDay(); // 0 = Dimanche

                // Nettoyer le calendrier précédent (sauf les en-têtes)
                while (calendarElement.children.length > 7) {
                    calendarElement.removeChild(calendarElement.lastChild);
                }

                // Ajouter les jours vides avant le premier jour du mois
                for (let i = 0; i < firstDay; i++) {
                    const emptyDay = document.createElement('div');
                    emptyDay.className = 'calendar-day empty';
                    calendarElement.appendChild(emptyDay);
                }

                // Ajouter les jours du mois
                for (let day = 1; day <= daysInMonth; day++) {
                    const dayElement = document.createElement('div');
                    const currentDayDate = new Date(year, month, day);

                    // Ajouter la classe 'today' si c'est aujourd'hui
                    if (isToday(currentDayDate)) {
                        dayElement.className = 'calendar-day today';
                    } else {
                        dayElement.className = 'calendar-day';
                    }

                    const dayNumber = document.createElement('div');
                    dayNumber.className = 'day-number';
                    dayNumber.textContent = day;
                    dayElement.appendChild(dayNumber);

                    const dayOfWeek = currentDayDate.getDay();

                    // Vérifier si c'est un jour de travail et pas un jour férié
                    if (workingDays.includes(dayOfWeek) && !isHoliday(currentDayDate)) {
                        const timeSlotsContainer = document.createElement('div');
                        timeSlotsContainer.className = 'time-slots-container';

                        // Heures de travail : 9h-12h et 14h-17h
                        const morningSlots = generateTimeSlots(currentDayDate, 9, 12);
                        const afternoonSlots = generateTimeSlots(currentDayDate, 14, 17);

                        morningSlots.forEach(slot => timeSlotsContainer.appendChild(slot));
                        afternoonSlots.forEach(slot => timeSlotsContainer.appendChild(slot));

                        dayElement.appendChild(timeSlotsContainer);
                    } else {
                        // Jour non travaillé
                        const nonWorkingMessage = document.createElement('div');
                        nonWorkingMessage.className = 'non-working-day';
                        nonWorkingMessage.textContent = isHoliday(currentDayDate) ? 'Jour férié' : 'Fermé';
                        dayElement.appendChild(nonWorkingMessage);
                    }

                    calendarElement.appendChild(dayElement);
                }

                // Mettre à jour l'affichage du mois et de l'année
                updateMonthYearDisplay(month, year);
            }

            // Génère les créneaux horaires pour une plage donnée
            function generateTimeSlots(date, startHour, endHour) {
                const slots = [];

                for (let hour = startHour; hour < endHour; hour++) {
                    const slotDate = new Date(date);
                    slotDate.setHours(hour, 0, 0, 0);

                    // Ne pas afficher les créneaux passés
                    if (slotDate < new Date()) continue;

                    const isBooked = existingAppointments.some(appointment => {
                        return appointment.date.getTime() === slotDate.getTime();
                    });

                    const timeSlot = document.createElement('div');
                    timeSlot.textContent = `${hour.toString().padStart(2, '0')}:00`;

                    if (isBooked) {
                        timeSlot.className = 'time-slot booked';
                    } else {
                        timeSlot.className = 'time-slot available';
                        timeSlot.dataset.date = slotDate.toISOString();
                        timeSlot.addEventListener('click', function() {
                            selectTimeSlot(slotDate);
                        });
                    }

                    slots.push(timeSlot);
                }

                return slots;
            }

            // Met à jour l'affichage du mois et de l'année
            function updateMonthYearDisplay(month, year) {
                const months = [
                    'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin',
                    'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'
                ];
                document.getElementById('current-month').textContent = `${months[month]} ${year}`;
            }

            // Fonction pour sélectionner un créneau horaire
            function selectTimeSlot(date) {
                const formattedDate = date.toLocaleString('fr-FR', {
                    weekday: 'long',
                    day: 'numeric',
                    month: 'long',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });

                const urlDate = date.toISOString().replace(/[-:]/g, '').replace('T', ' ').split('.')[0];

                if (confirm(`Souhaitez-vous prendre rendez-vous le ${formattedDate} avec le Dr. {{ rdv[0].medecin.user.nom }} ?`)) {
                    window.location.href = `/patient/prendre-rdv/${medecinId}/${encodeURIComponent(urlDate)}`;
                }
            }

            // Générer le calendrier initial
            generateCalendar(currentMonth, currentYear);

            // Gestion des boutons pour changer de mois
            document.querySelector('.prev-month').addEventListener('click', function() {
                currentMonth--;
                if (currentMonth < 0) {
                    currentMonth = 11;
                    currentYear--;
                }
                generateCalendar(currentMonth, currentYear);
            });

            document.querySelector('.next-month').addEventListener('click', function() {
                currentMonth++;
                if (currentMonth > 11) {
                    currentMonth = 0;
                    currentYear++;
                }
                generateCalendar(currentMonth, currentYear);
            });
        });
    </script>
{% endblock %}